// Code generated by protoc-gen-validate
// source: prototpl/person-service/person-service.proto
// DO NOT EDIT!!!

#include "prototpl/person-service/person-service.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::grpc::person::service::v1::PersonMessage> validator___grpc__person__service__v1__PersonMessage(static_cast<bool(*)(const ::grpc::person::service::v1::PersonMessage&, pgv::ValidationMsg*)>(::grpc::person::service::v1::Validate));


} // namespace validate
} // namespace pgv


namespace grpc {
namespace person {
namespace service {
namespace v1 {


// Validate checks the field values on
// ::grpc::person::service::v1::PersonMessage with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::grpc::person::service::v1::PersonMessage& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;// no validation rules for name// no validation rules for age
		
	return true;
}


} // namespace
} // namespace
} // namespace
} // namespace

